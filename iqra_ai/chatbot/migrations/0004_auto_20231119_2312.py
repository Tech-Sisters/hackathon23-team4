# Generated by Django 4.2.4 on 2023-11-19 20:12

from django.db import migrations
import csv, os, string

path = os.getcwd()
filepath = os.path.dirname(path)
print(filepath)

# csv file name
filename = filepath+"\Quran-All-Words.csv"
 
 
def read_csv():
    # initializing the titles and rows list
    fields = []
    rows = []

    # reading csv file
    with open(filename, 'r', encoding='utf-8') as csvfile:
        # creating a csv reader object
        csvreader = csv.reader(csvfile)
        
        # extracting field names through first row
        fields = next(csvreader)

        rowcount = 0
    
        # extracting each data row one by one
        for row in csvreader:
            if not row[2] == "Proper noun": # Remove proper nouns
                word = row[0]
                frequency = row[1]
                part_of_speech = row[2].lower()
                
                rows.append([word, frequency, part_of_speech])
                rowcount+=1

                if rowcount >= 500:
                    break
    
        # get total number of rows
        print("Total no. of rows: %d"%(rowcount)) 

    return rows

def add_levels(apps, schema_editor):
    Level = apps.get_model("chatbot", "Level")
    letters = list(string.ascii_uppercase)
    for letter in letters[:-1]:
        level = Level(letter=letter)
        level.save()

    
def add_lessons(apps, schema_editor):
    Level = apps.get_model("chatbot", "Level")
    Lesson = apps.get_model("chatbot", "Lesson")
    for level in Level.objects.all():
        for i in range(1,5):
            lesson = Lesson(number=i, level=level)
            lesson.save()

def add_words(apps, schema_editor):
    Word = apps.get_model("chatbot", "Word")
    Lesson = apps.get_model("chatbot", "Lesson")
    Level = apps.get_model("chatbot", "Level")

    rows = read_csv()
    wordcount = 0
    letters = list(string.ascii_uppercase)

    for row in rows:
        word = Word(
            word=row[0], 
            frequency=row[1], 
            part_of_speech=row[2], 
            word_type="lesson"
            )
        word.save()

        # Following formula gives 1,1,1,1,1,2x5,3x5,4x5,1x5,2x5,..
        lesson_number = (wordcount//5)%4+1           # +1 as wordcount starts from 0
        level_letter = letters[wordcount//20]        # not +1 as list index also starts from 0

        level = Level.objects.get(letter=level_letter)
        lesson = Lesson.objects.get(number=lesson_number, level=level)
        lesson.words.add(word)

        wordcount+=1


class Migration(migrations.Migration):

    dependencies = [
        ('chatbot', '0003_word_part_of_speech'),
    ]

    operations = [
        migrations.RunPython(add_levels),
        migrations.RunPython(add_lessons),
        migrations.RunPython(add_words)
    ]